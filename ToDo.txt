--> GameState.js which houses games current state, allows for loading/saving, and has current state of player/monsters/npcs/items/etc.

************************************************************************************************************************************************************

--> Inventory (Slots, and then brown bag background to make it look nice)
--> Looting Scene pop-up window (with enemy item drops)
--> Bank (Need chest in game to click on and bank stuff). Store (Need NPC or chest in game to click on and view store menu.)
--> Pause Menu/Controls(Esc key brings up menu options (Load, Save, Options, Esc, etc.) (Options --> Audio/Keybinds/Graphics etc.))
--> Equipment Scene, have an enlarged idling animation of the player on the equip screen, like runescape, and gear slots, and stats on the right. Have small button next to inventory bag with helmet and sword indicating that player can click and that also takes you to equipment scene.
--> Teleporter: =-D
--> Chatbox for console messages.
--> Loading Bar scene after the homescene that loads in assets.

--> (Bonus): Instead of spattackcost and spmanacost stuff in player, do that in playerstate, and define it there in the constructor.
--> (Bonus): Monster Attack Anims
--> (Bonus): Click to move/Click to initiate attack?
--> (Bonus): Monster Spawn zones instead of just random points.
--> (Bonus): Monster 'wandering' while in idle state? Or new 'wander' state.
--> (Bonus): Defense stat on monsters & player.
--> (Bonus): Debuffs and buffs.
--> (Bonus): Random % Chance for critical, would work with both attack and special attack. Along with crit efficiency (150% for example)
--> (Bonus): You can only save at the inn when you go to sleep.


--> (Small Refactor): Combine PlayerAttackState and PlayerSpecialAttackState.
--> (Small Refactor): Refactor playerstats/methods into a separate file? Player class is getting a bit messy with its stats and methods.
--> (Small Refactor): Can load in the monsters in a more streamlined manner with MonsterManager probably. (Currently adding them in 1 by 1 with all their stats)

--> (Small Bug): Fix status bar positions during camera zooming.
--> (Small Bug): Multiple Monsters running like idiots at you, pushing you around and not respecting the attackSensor as a stopping place sometimes.
--> (Small Bug): You can 'cheese' the running system and tap shift very fast while moving to conserve stamina. Perhaps a cooldown for the transition.
--> (Small Bug): If you aggro two enemies at once, only one will follow you. (Similar to how if you ran away from two monsters attack range quickly, only 1 would transition to attack state).
--> (Small Bug): For enemy attacking, instead of the timer starting and then waiting 1 second and then performing first attack, have the first attack always be instant at the first instant of touching the player collider and the monster attack sensor, and then start the timer. (Later on making it based off frames just like player attacking could be best.)
--> (Future Bug): Multiple mosnters spawn at once if you exit to map2 and back to map1. Also, game crashes if monster hits you after coming back to map1. (May have to do with not destroying the previous scene or something, or the gamestate)


Weapon/Armor Sprite and Animation:

--> Different sprites and animations for different weapons. Start with sword and axe, and two colors of each. Different base damages for each weapon.
--> Weapon range distance can be dealt by by turning off and on sensors like you have done for the 'Direction'. It is possible to combine many sensors onto the player and only turn on the ones you want. Also up/down/left/right sensors rather than just left/right. You would have up/down/left/right sensors, and then also a specific weapon sensor which is basically a rectangle, or other shape, with a specific length for that weapon range.
--> Contend with armor wearing using the paper dolling technique. Changing armor doesn't necessarily mean changing animations, but it does change the appearance of the character sprite. Each piece of gear or equipment (head, chest, legs, etc.) would be its own separate sprite or sprite sheet. These are layered on top of a base character sprite, which has its own set of animations (walking, running, etc.). The individual gear sprites can be static (not animated), or they can have their own animations that match up with the base character animations. When the gear is equipped, its sprite is added to the character's sprite at the appropriate layer and position.
--> Contend with weapon wielding sprites by having separate animations for each weapon type.
--> Paper dolling: Separate the weapon from the character, allowing it to be drawn independently. Then you can define a "hand" position in your character animation, and draw the weapon at that position with its own animation. This way, you can mix and match different weapon animations with the same character animation. To make this work, the artist needs to ensure that all the gear sprites align correctly with the base character sprite and its animations. For example, if the character raises their arm during an attack animation, there needs to be an equivalent 'raised arm' sprite for every piece of gear that could be equipped in the 'arm' slot.




GameState Thoughts:

The next step is to update the Player class to use these methods instead of directly accessing the player's attributes. This will involve replacing assignments to this.HP, this.maxHP, etc. with calls to setPlayerHP, setPlayerMaxHP, etc., and replacing accesses to this.HP, this.maxHP, etc. with calls to getPlayerHP, getPlayerMaxHP, etc.

The general concept is to go through all the files and see what needs to be changed. This will likely involve updating other classes that interact with the player's attributes, such as the PlayerState classes and the Monster class.

You'll need to import GameState.js into any file where you want to create a new GameState instance or where you want to pass an existing GameState instance to a constructor.

In your case, you'll likely need to import GameState.js in your Maps.js file, create a new GameState instance there, and then pass that instance to the Player's constructor when you create a new Player. You won't need to import GameState.js in your Player.js file because the GameState instance is being passed to the Player's constructor, so the Player class can access it without needing to import the GameState class.

Listeners and Emitters can usually be left alone. Typically tied to specific game objects or scenes, so they can be kept in current location. If the listeners and emitters are related to the game state, like a listener for players HP to update the HP bar, may want to move that listener to the gamestate since the gamestate will be managing the player's hp. If a timer or interval is related to the game state (for example, a timer that regenerates the player's HP), you might want to move it to the GameState.

Separation of Concerns:

1.	Player
    a. attributes
        i. hp
        ii. stamina
        iii. mana
        iv.	xp
    b. listeners/emitters/timers/intervals (probably don't need to worry about)
        i. levelUp?
        ii.	xpChange?
        iii. playerGotHit?
        iv. timers/intervals?
    c. general interaction with monsters?
        i. monsters often take in the playerâ€™s current state in various places.

2.	Monster
    a. attributes
        i. hp
    b. listeners/emitters
        i. playerGotHit
    c. general interaction with player
        i. monsers often take in the player's current state in various places.